---
interface Props {
  className?: string;
}
const res = await fetch('https://zhongguose.com/colors.json', {})
const colors = await res.json()
const { className } = Astro.props;
colors.map((el: { value: any; hex: any; }) => {
  el.value = el.hex
})
// const colors = [
//   { name: 'red', value: '#ef4444' },
//   { name: 'orange', value: '#f97316' },
//   // { name: 'yellow', value: 'yellow' },
//   { name: 'green', value: '#10b981' },
//   { name: 'blue', value: '#3b82f6' },
//   { name: 'purple', value: '#8b5cf6' },
// ];

const getCurrentColor = () => {
  if (typeof window !== 'undefined') {
    return localStorage.getItem('theme-color') || '#3b82f6';
  }
  return '#3b82f6';
};
getCurrentColor()
---

<theme-color-toggle class={`theme-color-toggle ${className || ''}`}>
  <button
    class="relative h-8 w-8 cursor-pointer p-1 hover:text-accent"
    type="button"
    aria-label="Change theme color"
  >
  <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" viewBox="0 0 14 14"><!-- Icon from Streamline by Streamline - https://creativecommons.org/licenses/by/4.0/ --><path fill="currentColor" fill-rule="evenodd" d="M8.09.065a7.06 7.06 0 0 0-6.676 2.893a7.06 7.06 0 0 0-.502 7.259a7.06 7.06 0 0 0 6.214 3.784a6.8 6.8 0 0 0 1.878-.259c.775-.218 1.104-.902 1.087-1.514c-.017-.59-.357-1.244-1.039-1.498l-.023-.008a1.356 1.356 0 0 1-.902-1.483A1.356 1.356 0 0 1 9.45 8.115h1.837V7.49l-.002.625a2.61 2.61 0 0 0 2.118-1.092c.481-.68.605-1.576.327-2.36A7.06 7.06 0 0 0 8.09.064m.914 13.677l-.169-.602zM2.434 3.68A5.8 5.8 0 0 1 7.92 1.303a5.8 5.8 0 0 1 4.63 3.777a1.36 1.36 0 0 1-.168 1.22a1.36 1.36 0 0 1-1.095.565H9.452v.625l.002-.625h-.001a2.606 2.606 0 0 0-2.56 2.175a2.606 2.606 0 0 0 1.73 2.865c.113.045.213.178.218.36a.33.33 0 0 1-.044.186c-.021.033-.056.067-.131.088h-.003a5.6 5.6 0 0 1-1.534.212h-.001a5.8 5.8 0 0 1-5.106-3.108a5.8 5.8 0 0 1 .412-5.963M4.5 8.5a1 1 0 1 0 0 2a1 1 0 0 0 0-2M7 4a1.5 1.5 0 1 1 3 0a1.5 1.5 0 0 1-3 0M4.5 4a1.5 1.5 0 1 0 0 3a1.5 1.5 0 0 0 0-3" clip-rule="evenodd"/></svg>
    <!-- <svg
      xmlns="http://www.w3.org/2000/svg"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="1.5"
      class="h-8 w-8"
    >
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M10.325 4.317c.426-1.756 2.924-1.756 3.35 0a1.724 1.724 0 002.573 1.066c1.543-.94 3.31.826 2.37 2.37a1.724 1.724 0 001.065 2.572c1.756.426 1.756 2.924 0 3.35a1.724 1.724 0 00-1.066 2.573c.94 1.543-.826 3.31-2.37 2.37a1.724 1.724 0 00-2.572 1.065c-.426 1.756-2.924 1.756-3.35 0a1.724 1.724 0 00-2.573-1.066c-1.543.94-3.31-.826-2.37-2.37a1.724 1.724 0 00-1.065-2.572c-1.756-.426-1.756-2.924 0-3.35a1.724 1.724 0 001.066-2.573c-.94-1.543.826-3.31 2.37-2.37.996.608 2.296.07 2.572-1.065z"
      />
      <path
        stroke-linecap="round"
        stroke-linejoin="round"
        d="M15 12a3 3 0 11-6 0 3 3 0 016 0z"
      />
    </svg> -->
  </button>
  
  <div class="theme-colors transition-all translate-x-[360px] duration-300 flex flex-wrap max-h-[200px] z-9999 overflow-y-auto absolute right-full top-[-60px] w-60 rounded-md backdrop-blur p-2 shadow-lg dark:bg-gray-800">
    {colors.map((color: { value: any; name: any; }) => (
      <div class="flex flex-col text-center m-1 mx-[auto]">
        <button
        class="h-8 w-8 cursor-pointer mx-[auto]"
        style={`background-color: ${color.value}`}
        data-color={color.value}
        aria-label={`Set theme color to ${color.name}`}
      />
      <span class="line-clamp-1 w-[50px] mt-1">{color.name}</span>
      </div>))}
  </div>
</theme-color-toggle>

<script>
  import { rootInDarkMode } from "@/utils/domElement";
  class ThemeColorToggle extends HTMLElement {
    connectedCallback() {
      const toggleBtn = this.querySelector('button');
      const colorsPanel = this.querySelector('.theme-colors');
      const colorButtons = this.querySelectorAll('.theme-colors button');
      
      // Set initial color from localStorage
      const savedColor = localStorage.getItem('theme-color');
      if (savedColor) {
        document.documentElement.style.setProperty('--byt-main-color', savedColor);
      }
      
      // Add event listeners
      toggleBtn?.addEventListener('click', () => {
        colorsPanel?.classList.toggle('!translate-x-[0px]');
      });
      
      colorButtons.forEach(button => {
        button.addEventListener('click', () => {
          const colorValue = button.getAttribute('data-color');
          document.documentElement.style.setProperty('--byt-main-color', colorValue);
          localStorage.setItem('theme-color', colorValue || '');
          document.dispatchEvent(new CustomEvent('theme-color-change', {
            detail: { color: colorValue }
          }));
          colorsPanel?.classList.remove('!translate-x-[0px]');
        });
      });
      
      // Close panel when clicking outside
      document.addEventListener('click', (e) => {
        if (!this.contains(e.target as Node)) {
          colorsPanel?.classList.remove('!translate-x-[0px]');
        }
      });
    }

    disconnectedCallback() {
      // Clean up event listeners if needed 
    }
  }
  
  customElements.define("theme-color-toggle", ThemeColorToggle);
</script>

<style is:global>
  :root {
    --byt-main-color: #ef4444;
  }
</style>
