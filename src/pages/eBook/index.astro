---
import Layout from "@/layouts/ToolLayout/ToolLayout.astro";
import { getAllbooks } from "@/data/ebook";
const allbooks = await getAllbooks()

const meta = {
    type: 'eBook',
	description: "ÊàëÊúÄËøëÂú®ÈòÖËØªÁöÑÁîµÂ≠ê‰π¶ÔºåÊÑüÂÖ¥Ë∂£ÁöÑÊúãÂèãÂèØ‰ª•‰∏éÊàë‰∏ÄËµ∑ÂàÜ‰∫´",
	title: "ÁîµÂ≠ê‰π¶ üìñ",
};
// console.log(allbooks, 'allbooks');
const data = allbooks.map(el => el.data)
const isPro = import.meta.env.PROD
---

<Layout frontmatter={meta}>
    {data.length === 0 ? <section class="byt-space-loading absolute"><span></span><span></span><span></span></section> : null}
    <!-- <h1 transition:name={`title`} transition:animate={`slide`} class="title mb-6 flex items-center gap-3">ÁîµÂ≠ê‰π¶</h1> -->
    {
        !isPro ? <div class="add-btn cursor-pointer rounded-md bg-[var(--byt-white-color)] px-10 mb-4 text-[40px] w-full justify-center items-center flex flex-col h-[100px] text-[var(--byt-main-color)] transition-all duration-300 ease-in-out shadow-[var(--byt-box-shadow)]">
            <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" viewBox="0 0 24 24"><!-- Icon from Majesticons by Gerrit Halfmann - https://github.com/halfmage/majesticons/blob/main/LICENSE --><g fill="currentColor"><path d="M12.5 6c-2.294 0-3.71 1.655-4.106 2.447A1 1 0 0 1 7.5 9c-.757 0-1.914.235-2.853.912C3.758 10.552 3 11.626 3 13.5s.758 2.949 1.647 3.588c.94.677 2.096.912 2.853.912a1 1 0 1 1 0 2c-1.077 0-2.67-.315-4.022-1.288C2.075 17.701 1 16.026 1 13.5s1.075-4.201 2.478-5.212c1.124-.809 2.413-1.163 3.435-1.26C7.751 5.773 9.626 4 12.5 4c2.13 0 3.65 1.08 4.607 2.33a7.133 7.133 0 0 1 1.285 2.745c.785.127 1.695.43 2.505 1.014C22.092 10.948 23 12.373 23 14.5c0 2.126-.908 3.551-2.103 4.412C19.753 19.735 18.41 20 17.5 20a1 1 0 1 1 0-2c.59 0 1.497-.185 2.228-.712c.68-.49 1.272-1.314 1.272-2.788c0-1.474-.592-2.299-1.272-2.789c-.73-.526-1.638-.711-2.228-.711a1 1 0 0 1-1-1c0-.502-.284-1.543-.982-2.455C14.85 6.67 13.87 6 12.5 6zm-1.207 4.293a1 1 0 0 1 1.414 0l3 3a1 1 0 0 1-1.414 1.414L13 13.414V19a1 1 0 1 1-2 0v-5.586l-1.293 1.293a1 1 0 0 1-1.414-1.414l3-3z"/></g></svg>
            <span class="text-xl mt-2">‰∏ä‰º†</span>
            <input type="file" accept=".epub,.txt" hidden />
        </div> : null
    }
    <div id="books" class="books grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4">
        {
            data.map((item, index) => <div id={`book${index+1}`} data-id={item.objectId} class="book-item rounded overflow-hidden bg-[var(--byt-white-color)] shadow-[var(--byt-box-shadow)]"><a href={'/eBook/'+item.title}><div class={`w-full  overflow-hidden`}  title={`${item.title}-${item.author}`}>
            <img transition:name={`img-${item.title}-${item.author}`} data-byt-lz-src={item.img} class="h-[230px] sm:h-[260px] w-full" alt={item.title} />
            <h3 transition:name={`title-${item.title}`} class="text-center !text-sm !line-clamp-1 mt-2">{item.title}-{item.author.split('.')[0]}</h3></div></a>
            {!isPro ? <div class="flex justify-center my-1"><button class="remove-btn border px-1 rounded-md text-[var(--byt-main-color)] border-[var(--byt-main-color)] cursor-pointer" data-object-id={item.objectId} data-id={`book${index+1}`}>Âà†Èô§</button></div> : null}
            </div>)
        }
    </div>
</Layout>
<script>
    import { inRouter } from '@/utils/updateRouter'
    import { handleDelete, upload, update } from '@/api/book'
    import localforage from 'localforage'
    import Epub from 'epubjs'
    import loadingService from '@/utils/Loading'
    import { Toast } from '@/utils/Toast'
    import Sortable from 'sortablejs'
    // ÂõæÁâáÊáíÂä†ËΩΩ
    import LzImgInit from "@/scripts/LazyImg";
    let targetEl = document.querySelector('.add-btn') as HTMLDivElement
    let fileEl = document.querySelector('.add-btn input') as HTMLInputElement
    let bookEl = document.querySelector('#books') as HTMLDivElement
    // ÂàùÂßãÂåñ SortableJS
    if (!import.meta.env.PROD && bookEl) {
        Sortable.create(bookEl, {
            animation: 150,
            draggable: ".book-item",
            onEnd: async () => {
                const items = Array.from(bookEl.children).map((el: any) => el.getAttribute('data-id')).filter(el => !!el);
                try {
                    await Promise.all(items.map((el, index) => update(el, { order: index + 1 })));
                    Toast('ÊéíÂ∫èÂ∑≤‰øùÂ≠òÔºÅ');
                } catch (error) {
                    Toast('‰øùÂ≠òÊéíÂ∫èÂ§±Ë¥•ÔºåËØ∑ÈáçËØïÔºÅ');
                }
            }
        });
    }

    targetEl && (targetEl.onclick = () => {
        fileEl.click()
    })
    let loading = loadingService(bookEl)
    // loading.show({precent: 0})
    bookEl && bookEl.addEventListener('click', (e:any) => {
        // console.log(e.target.tagName, 'e.target.tagName');
        if (e.target.tagName === 'BUTTON') {
            let target = e.target
            let id = target.getAttribute('data-id')
            let objectId = target.getAttribute('data-object-id')
            loading.show({})
            if (objectId) handleDelete(objectId).then(() => {
                loading.hide()
                Toast('Âà†Èô§ÊàêÂäüÔºÅ')
                document.querySelector(`#${id}`)?.remove()
            })
        }
    })
    fileEl && (fileEl.onchange = (e: Event) => {
        let target = e.target as any
        let files = [...target.files]
        files.map(async el => {
            let book:any = Epub(el);
            book.ready.then(async () => {
                loading.show({})
                let coverUrl = await book.coverUrl()
                let result = await fetch(coverUrl).then(res => res.blob())
                let reader = new FileReader()
                reader.readAsDataURL(result)
                reader.onload = () => {
                    loading.show({precent: 0})
                    upload(el.name, el, {cover: { base64: reader.result }, onprogress: (data:any) => {
                        // loading.onprogress(data)
                        loading.show({precent: data.percent.toFixed(2)})
                    }}).then((data:any) => {
                        const { attributes, id } = data
                        // console.log(attributes, 'data');
                        let alink = document.createElement('div') as HTMLDivElement
                        let removeBtnEl = bookEl.querySelectorAll('.remove-btn')
                        alink.id = `book${removeBtnEl.length+1}`
                        alink.setAttribute('class', 'book-item bg-[var(--byt-white-color)] w-full overflow-hidden rounded shadow-[var(--byt-box-shadow)]')
                        alink.innerHTML = `<a href='/eBook/${el.name.split('_')[0]}'><div class='w-full  overflow-hidden'  title='${attributes.title}'>
                        <img data-byt-lz-src='${attributes.img.replace('dailynote', 'blog-cloud')}' class="h-[230px] sm:h-[260px] w-full" alt={item.title} />
                        <h3 class="text-center !text-sm !line-clamp-1 mt-2">${el.name.split('_')[0]}-${el.name.split('_')[1]}</h3></div></a><div class="flex justify-center my-1"><button class="remove-btn border px-1 rounded-md text-[var(--byt-main-color)] border-[var(--byt-main-color)] cursor-pointer" data-object-id=${id} data-id="book${removeBtnEl.length+1}">Âà†Èô§</button></div>`
                        bookEl.prepend(alink)
                        localforage.setItem('book_' + el.name, el.arrayBuffer())
                        Toast('‰∏ä‰º†ÊàêÂäüÔºÅ')
                        fileEl.value = ''
                        loading.hide()
                        LzImgInit()
                    })
                }
            })
        })
    })
    const ebookMainEl = document.querySelector('.main-inner-content>.byt-tools-main>main.ebook-main')
    if (ebookMainEl) ebookMainEl.innerHTML = ''
    inRouter(() => {
        if (ebookMainEl) ebookMainEl.innerHTML = ''
    })
</script>
